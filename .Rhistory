df2_lima_piura_var <- n_piura_lima_piura_var - 1
# Valores críticos para una prueba de dos colas
alpha_lima_piura_var <- 0.05
f_critico_inferior_lima_piura_var <- qf(alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
f_critico_superior_lima_piura_var <- qf(1 - alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
# Crear datos para la gráfica
x_lima_piura_var <- seq(0, 2.5, length = 100)
y_lima_piura_var <- df(x_lima_piura_var, df1_lima_piura_var, df2_lima_piura_var)
data_densidad_lima_piura_var <- data.frame(x = x_lima_piura_var, y = y_lima_piura_var)
ggplot(data_densidad_lima_piura_var, aes(x)) +
geom_line(aes(y = y), color = "blue") +
geom_area(data = subset(data_densidad_lima_piura_var, x <= f_critico_inferior_lima_piura_var | x >= f_critico_superior_lima_piura_var), aes(y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = f_critico_inferior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_critico_superior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_estadistico_lima_piura_var, color = "purple", linetype = "dotted") +
geom_text(aes(x = f_estadistico_lima_piura_var, y = max(y_lima_piura_var) * 0.9, label = round(f_estadistico_lima_piura_var, 2)), color = "purple", hjust = -0.2) +
labs(title = "Prueba de Hipótesis para la Varianza del MONTO entre Lima y Piura",
x = "Valor F",
y = "Densidad",
subtitle = paste("F calculado =", round(f_estadistico_lima_piura_var, 3),
"\nValor crítico inferior =", round(f_critico_inferior_lima_piura_var, 3),
"\nValor crítico superior =", round(f_critico_superior_lima_piura_var, 3))) +
theme_minimal() + theme(
# Ajustar el tamaño del gráfico proporcionalmente
plot.margin = margin(1 * prop_original, 1, 1 * prop_original, 1, "cm")  # Ajuste proporcional del margen en cm
)
deportes_piura <- muestra_deportistas_departamento[muestra_deportistas_departamento$DEPARTAMENTO=="PIURA",]
# Parámetros de la prueba
mu_0_l_p <- 0  # valor hipotético de la diferencia de medias (generalmente 0)
alpha_l_p <- 0.10  # nivel de significancia
monto_lima <- deportes_lima$MONTO  # extraer la columna MONTO para Lima
monto_piura <- deportes_piura$MONTO  # extraer la columna MONTO para Piura
# Calcular estadísticas descriptivas
n_lima <- length(monto_lima)
n_piura <- length(monto_piura)
media_muestral_lima <- mean(monto_lima)
media_muestral_piura <- mean(monto_piura)
desviacion_estandar_lima <- sd(monto_lima)
desviacion_estandar_piura <- sd(monto_piura)
# Error estándar de la diferencia de medias
error_estandar_l_p <- sqrt((desviacion_estandar_lima^2 / n_lima) + (desviacion_estandar_piura^2 / n_piura))
# Estadístico t para la diferencia de medias
t_estadistico_lima_piura <- (media_muestral_lima - media_muestral_piura - mu_0_l_p) / error_estandar_l_p
# Grados de libertad usando la fórmula proporcionada
numerador <- (desviacion_estandar_lima^2 / n_lima + desviacion_estandar_piura^2 / n_piura)^2
denominador <- ((desviacion_estandar_lima^2 / n_lima)^2 / (n_lima - 1)) + (((desviacion_estandar_piura^2 / n_piura)^2) / (n_piura - 1))
df_L_p <- numerador / denominador
# Valores críticos para un nivel de significancia del 10% para dos colas
t_critico_l_p <- qt(1 - alpha_l_p / 2, df_L_p)
# Crear datos para la gráfica
x_x <- seq(-4, 4, length = 100)
y_y <- dt(x_x, df_L_p)
data_densidad_l_p <- data.frame(x_x, y_y)
# Crear el gráfico
ggplot(data_densidad_l_p, aes(x = x_x)) +
geom_line(aes(y = y_y), color = "blue") +
geom_area(data = subset(data_densidad_l_p, x_x <= -t_critico_l_p), aes(y = y_y), fill = "red", alpha = 0.5) +
geom_area(data = subset(data_densidad_l_p, x_x >= t_critico_l_p), aes(y = y_y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = -t_critico_l_p, color = "green", linetype = "dashed") +
geom_vline(xintercept = t_critico_l_p, color = "green", linetype = "dashed") +
geom_vline(xintercept = t_estadistico_lima_piura, color = "purple", linetype = "dotted") +
geom_text(aes(x = t_estadistico_lima_piura, y = max(y_y) * 0.9, label = round(t_estadistico_lima_piura, 2)), color = "purple", hjust = -0.2) +
labs(title = paste("Prueba de Hipótesis para la Diferencia de Medias del MONTO entre Lima y Piura"),
x = "Valor t",
y = "Densidad",
subtitle = paste("t estadístico =", round(t_estadistico_lima_piura, 2),
"\nValor crítico t =", round(t_critico_l_p, 2),
"\nGrados de libertad =", round(df_L_p, 2))) +
theme_minimal()
View(cantidad_deportistas_por_federacion)
View(total_por_columna)
View(resultado_final)
# Cargar las librerías necesarias
library(dplyr)
# Definir el nivel de confianza (por ejemplo, 95%)
conf_level <- 0.95
# Excluir la primera fila que contiene los totales
resultado_final_sin_totales <- resultado_final[-1, ]
# Calcular los intervalos de confianza para la proporción por cada federación usando prop.test
intervalos_confianza <- lapply(1:nrow(resultado_final_sin_totales), function(i) {
prop.test(
round(resultado_final_sin_totales$Proporcion[i] * resultado_final_sin_totales$Cantidad[i]),  # número de éxitos (redondeado)
resultado_final_sin_totales$Cantidad[i],  # tamaño de la muestra
conf.level = conf_level  # nivel de confianza
)$conf.int
})
# Crear un dataframe con los resultados
resultado_final_intervalos <- data.frame(
FEDERACION = resultado_final_sin_totales$FEDERACION,
Lower_CI_prop = sapply(intervalos_confianza, "[[", 1),
Upper_CI_prop = sapply(intervalos_confianza, "[[", 2)
)
# Añadir la primera fila (Totales) al dataframe de resultados
resultado_final_intervalos <- rbind(
data.frame(FEDERACION = resultado_final$FEDERACION[1], Lower_CI_prop = NA, Upper_CI_prop = NA),
resultado_final_intervalos
)
# Mostrar el resultado
print(resultado_final_intervalos)
qnorm(0.975)
View(resultado_final)
prop_atlestismo <- resultado_final$Proporcion-qnom(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325)
prop_atlestismo <- resultado_final$Proporcion-qnorm(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325)
print(prop_atlestismo)
str(prop_atlestismo)
library(tibble)
prop_atlestismo_tibble <- as_tibble(prop_atlestismo)
# Mostrar el tibble resultante
print(prop_atlestismo_tibble)
print(prop_atlestismo)
prop_atlestismo_tibble <- as_tibble(prop_atlestismo_su)
# límite inferior
prop_atlestismo_li <- resultado_final$Proporcion-qnorm(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325)
print(prop_atlestismo)
prop_atlestismo_tibble_li <- as_tibble(prop_atlestismo_li)
prop_atlestismo_tibble_su <- as_tibble(prop_atlestismo_su)
prop_atlestismo_tibble_su <- as_tibble(prop_atlestismo_su)
# límite inferior
prop_atlestismo_li <- resultado_final$Proporcion-qnorm(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325)
# límite superior
prop_atlestismo_su <- resultado_final$Proporcion+qnorm(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325)
# límite inferior
prop_atlestismo_li <- round(resultado_final$Proporcion-qnorm(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325), 4)
# límite superior
prop_atlestismo_su <- round(resultado_final$Proporcion+qnorm(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325), 4)
prop_atlestismo_tibble_li <- as_tibble(prop_atlestismo_li)
prop_atlestismo_tibble_su <- as_tibble(prop_atlestismo_su)
View(prop_atlestismo_tibble_li)
View(prop_atlestismo_tibble_su)
View(resumen_lima)
View(resultado_final)
tabla_proporcion_intervalos <- bind_cols(resultado_final$FEDERACION, prop_atlestismo_tibble_li, prop_atlestismo_tibble_su)
print(tabla_proporcion_intervalos)
View(tabla_proporcion_intervalos)
View(ci_var_departamento)
deportes_piura <- muestra_deportistas_departamento[muestra_deportistas_departamento$DEPARTAMENTO=="PIURA",]
# Parámetros de la prueba
mu_0_l_p <- 0  # valor hipotético de la diferencia de medias (generalmente 0)
alpha_l_p <- 0.10  # nivel de significancia
monto_lima <- deportes_lima$MONTO  # extraer la columna MONTO para Lima
monto_piura <- deportes_piura$MONTO  # extraer la columna MONTO para Piura
# Calcular estadísticas descriptivas
n_lima <- length(monto_lima)
n_piura <- length(monto_piura)
media_muestral_lima <- mean(monto_lima)
media_muestral_piura <- mean(monto_piura)
desviacion_estandar_lima <- sd(monto_lima)
desviacion_estandar_piura <- sd(monto_piura)
# Error estándar de la diferencia de medias
error_estandar_l_p <- sqrt((desviacion_estandar_lima^2 / n_lima) + (desviacion_estandar_piura^2 / n_piura))
# Estadístico t para la diferencia de medias
t_estadistico_lima_piura <- (media_muestral_lima - media_muestral_piura - mu_0_l_p) / error_estandar_l_p
# Grados de libertad
df_L_p <- 137.1555
# Valores críticos para un nivel de significancia del 10% para dos colas
t_critico_l_p <- qt(1 - alpha_l_p / 2, df_L_p)
# Crear datos para la gráfica
x_x <- seq(-4, 4, length = 100)
y_y <- dt(x_x, df_L_p)
data_densidad_l_p <- data.frame(x_x, y_y)
# Crear el gráfico
ggplot(data_densidad_l_p, aes(x = x_x)) +
geom_line(aes(y = y_y), color = "blue") +
geom_area(data = subset(data_densidad_l_p, x_x <= -t_critico_l_p), aes(y = y_y), fill = "red", alpha = 0.5) +
geom_area(data = subset(data_densidad_l_p, x_x >= t_critico_l_p), aes(y = y_y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = -t_critico_l_p, color = "green", linetype = "dashed") +
geom_vline(xintercept = t_critico_l_p, color = "green", linetype = "dashed") +
geom_vline(xintercept = t_estadistico_lima_piura, color = "purple", linetype = "dotted") +
geom_text(aes(x = t_estadistico_lima_piura, y = max(y_y) * 0.9, label = round(t_estadistico_lima_piura, 2)), color = "purple", hjust = -0.2) +
labs(title = paste("Prueba de Hipótesis para la Diferencia de Medias del MONTO entre Lima y Piura"),
x = "Valor t",
y = "Densidad",
subtitle = paste("t estadístico =", round(t_estadistico_lima_piura, 2),
"\nValor crítico t =", round(t_critico_l_p, 2),
"\nGrados de libertad =", round(df_L_p, 2))) +
theme_minimal()
# Parámetros de la prueba
sigma_0_lima_piura_var <- 0  # valor hipotético de la varianza
alpha_lima_piura_var <- 0.10  # nivel de significancia
n_lima_piura_var <- 70  # tamaño de la muestra por departamento
# Dividir los datos por departamento
monto_lima_lima_piura_var <- muestra_deportistas_departamento$MONTO[muestra_deportistas_departamento$DEPARTAMENTO == "LIMA"]
monto_piura_lima_piura_var <- muestra_deportistas_departamento$MONTO[muestra_deportistas_departamento$DEPARTAMENTO == "PIURA"]
# Parámetros de la prueba
n_lima_lima_piura_var <- length(monto_lima_lima_piura_var)
n_piura_lima_piura_var <- length(monto_piura_lima_piura_var)
var_lima_lima_piura_var <- var(monto_lima_lima_piura_var)
var_piura_lima_piura_var <- var(monto_piura_lima_piura_var)
f_estadistico_lima_piura_var <- var_lima_lima_piura_var / var_piura_lima_piura_var
df1_lima_piura_var <- n_lima_lima_piura_var - 1
df2_lima_piura_var <- n_piura_lima_piura_var - 1
# Valores críticos para una prueba de dos colas
alpha_lima_piura_var <- 0.05
f_critico_inferior_lima_piura_var <- qf(alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
f_critico_superior_lima_piura_var <- qf(1 - alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
# Crear datos para la gráfica
x_lima_piura_var <- seq(0, 2.5, length = 100)
y_lima_piura_var <- df(x_lima_piura_var, df1_lima_piura_var, df2_lima_piura_var)
data_densidad_lima_piura_var <- data.frame(x = x_lima_piura_var, y = y_lima_piura_var)
ggplot(data_densidad_lima_piura_var, aes(x)) +
geom_line(aes(y = y), color = "blue") +
geom_area(data = subset(data_densidad_lima_piura_var, x <= f_critico_inferior_lima_piura_var | x >= f_critico_superior_lima_piura_var), aes(y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = f_critico_inferior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_critico_superior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_estadistico_lima_piura_var, color = "purple", linetype = "dotted") +
geom_text(aes(x = f_estadistico_lima_piura_var, y = max(y_lima_piura_var) * 0.9, label = round(f_estadistico_lima_piura_var, 2)), color = "purple", hjust = -0.2) +
labs(title = "Prueba de Hipótesis para la Varianza del MONTO entre Lima y Piura",
x = "Valor F",
y = "Densidad",
subtitle = paste("F calculado =", round(f_estadistico_lima_piura_var, 3),
"\nValor crítico inferior =", round(f_critico_inferior_lima_piura_var, 3),
"\nValor crítico superior =", round(f_critico_superior_lima_piura_var, 3))) +
theme_minimal() + theme(
# Ajustar el tamaño del gráfico proporcionalmente
plot.margin = margin(1 * prop_original, 1, 1 * prop_original, 1, "cm")  # Ajuste proporcional del margen en cm
)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Parámetros de la prueba
sigma_0_lima_piura_var <- 0  # valor hipotético de la varianza
alpha_lima_piura_var <- 0.10  # nivel de significancia
n_lima_piura_var <- 70  # tamaño de la muestra por departamento
# Dividir los datos por departamento
monto_lima_lima_piura_var <- muestra_deportistas_departamento$MONTO[muestra_deportistas_departamento$DEPARTAMENTO == "LIMA"]
monto_piura_lima_piura_var <- muestra_deportistas_departamento$MONTO[muestra_deportistas_departamento$DEPARTAMENTO == "PIURA"]
# Parámetros de la prueba
n_lima_lima_piura_var <- length(monto_lima_lima_piura_var)
n_piura_lima_piura_var <- length(monto_piura_lima_piura_var)
var_lima_lima_piura_var <- var(monto_lima_lima_piura_var)
var_piura_lima_piura_var <- var(monto_piura_lima_piura_var)
f_estadistico_lima_piura_var <- var_lima_lima_piura_var / var_piura_lima_piura_var
df1_lima_piura_var <- n_lima_lima_piura_var - 1
df2_lima_piura_var <- n_piura_lima_piura_var - 1
# Valores críticos para una prueba de dos colas
alpha_lima_piura_var <- 0.05
f_critico_inferior_lima_piura_var <- qf(alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
f_critico_superior_lima_piura_var <- qf(1 - alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
# Crear datos para la gráfica
x_lima_piura_var <- seq(0, 2.5, length = 100)
y_lima_piura_var <- df(x_lima_piura_var, df1_lima_piura_var, df2_lima_piura_var)
data_densidad_lima_piura_var <- data.frame(x = x_lima_piura_var, y = y_lima_piura_var)
ggplot(data_densidad_lima_piura_var, aes(x)) +
geom_line(aes(y = y), color = "blue") +
geom_area(data = subset(data_densidad_lima_piura_var, x <= f_critico_inferior_lima_piura_var | x >= f_critico_superior_lima_piura_var), aes(y = y), fill = , alpha = 0.5) +
geom_vline(xintercept = f_critico_inferior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_critico_superior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_estadistico_lima_piura_var, color = "purple", linetype = "dotted") +
geom_text(aes(x = f_estadistico_lima_piura_var, y = max(y_lima_piura_var) * 0.9, label = round(f_estadistico_lima_piura_var, 2)), color = "purple", hjust = -0.2) +
labs(title = "Prueba de Hipótesis para la Varianza del MONTO entre Lima y Piura",
x = "Valor F",
y = "Densidad",
subtitle = paste("F calculado =", round(f_estadistico_lima_piura_var, 3),
"\nValor crítico inferior =", round(f_critico_inferior_lima_piura_var, 3),
"\nValor crítico superior =", round(f_critico_superior_lima_piura_var, 3))) +
theme_minimal() + theme(
# Ajustar el tamaño del gráfico proporcionalmente
plot.margin = margin(1 * prop_original, 1, 1 * prop_original, 1, "cm")  # Ajuste proporcional del margen en cm
)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(pacman)
p_load(ggplot2, readr, dplyr, tidyr, knit, kableExtra, EnvStats, )
# Leer el archivo CSV
data <- read.csv("Data_DeportistasBeneficiados.csv", sep = ";")
# Suponiendo que 'data' es el nombre correcto de tu conjunto de datos
poblacion_deportistas <- data[, c("ANIO", "FEDERACION", "NIVEL", "MONTO", "DEPARTAMENTO")]
poblacion_deportistas <- poblacion_deportistas %>%
mutate(DEPARTAMENTO = ifelse(DEPARTAMENTO == "", "EXTRANJERO", DEPARTAMENTO))
# Contar el número de deportistas por departamento
departamento_counts <- poblacion_deportistas %>%
group_by(DEPARTAMENTO) %>%
summarise(n = n()) %>%
arrange(desc(n))
# Seleccionar los 7 departamentos con más deportistas
top_7_departamentos <- departamento_counts %>%
top_n(7, wt = n) %>%
pull(DEPARTAMENTO)
# Filtrar los datos para incluir solo estos 7 departamentos
poblacion_top_7_departamentos <- poblacion_deportistas %>%
filter(DEPARTAMENTO %in% top_7_departamentos)
# Fija la semilla para la reproducibilidad
set.seed(123)
# Define el número mínimo de muestras por departamento
min_sample_size <- 70
# Filtra departamentos con al menos 70 personas
departamentos_con_mas_de_70 <- poblacion_top_7_departamentos %>%
group_by(DEPARTAMENTO) %>%
filter(n() > min_sample_size) %>%
ungroup()
# Extrae una muestra aleatoria de al menos 70 personas por cada departamento y almacénala en un data frame
muestra_deportistas_departamento <- departamentos_con_mas_de_70 %>%
group_by(DEPARTAMENTO) %>%
sample_n(min_sample_size) %>%
ungroup()
# Calcular el resumen de estadísticas por departamento
resumen_monto_departamento_poblacional <- poblacion_top_7_departamentos %>%
group_by(DEPARTAMENTO) %>%
summarise(
"Media (\\(\\mu\\))" = mean(MONTO, na.rm = TRUE),
"Varianza (\\(\\sigma^{2}\\))" = var(MONTO, na.rm = TRUE),
"Desviación Estándar (\\(\\sigma\\))" = sd(MONTO, na.rm = TRUE),
"Tamaño de la muestra (\\(n\\))" = n()
)
# Imprimir el resumen en una tabla usando kable
knitr::kable(resumen_monto_departamento_poblacional, format = "latex", booktabs = TRUE, escape = FALSE,
caption = "Resumen de estadísticas por departamento") %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
# Calcula la media, varianza y desviación estándar de MONTO por cada departamento
resumen_monto_departamento <- muestra_deportistas_departamento %>%
group_by(DEPARTAMENTO) %>%
summarise(
"Media (\\(\\bar{x}\\))" = mean(MONTO, na.rm = TRUE),
"Varianza (\\(s^{2}\\))" = var(MONTO, na.rm = TRUE),
"Desviación Estándar (\\(s\\))" = sd(MONTO, na.rm = TRUE)
)
# Imprime el resumen en una tabla usando kable
knitr::kable(resumen_monto_departamento, format = "latex", booktabs = TRUE, escape = FALSE, caption = "Resumen de estadísticas por departamento") %>% kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
# Suponiendo que muestra_deportistas_departamento es tu conjunto de datos
# y que MONTO es una columna numérica sobre la cual quieres calcular los intervalos de confianza
# Calcular intervalos de confianza por departamento
intervalos_confianza <- muestra_deportistas_departamento %>%
group_by(DEPARTAMENTO) %>%
summarise(
lower_CI = t.test(MONTO)$conf.int[1],  # límite inferior del intervalo de confianza
upper_CI = t.test(MONTO)$conf.int[2]   # límite superior del intervalo de confianza
)
# Suponiendo que intervalos_confianza es un tibble generado previamente
# Convertir intervalos_confianza a data.frame
intervalos_confianza_df <- as.data.frame(intervalos_confianza)
# Modificar nombres de columnas para evitar problemas con LaTeX
colnames(intervalos_confianza_df) <- c("DEPARTAMENTO", "Límite Inferior", "Límite Superior")
# Imprime el resumen en una tabla usando kable
knitr::kable(intervalos_confianza_df, format = "latex", booktabs = TRUE, escape = FALSE, caption = "Resumen de Intervalos de confianza del monto recibido promedio por deportista según departamento") %>% kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
# Función para calcular el intervalo de confianza de la varianza
calc_variance_ci <- function(data) {
result <- varTest(data$MONTO, conf.level = 0.95)
return(c(Lower_CI = result$conf.int[1], Upper_CI = result$conf.int[2]))
}
# Calcular el intervalo de confianza de la varianza por DEPARTAMENTO
ci_var_departamento <- muestra_deportistas_departamento %>%
group_by(DEPARTAMENTO) %>%
summarise(
Lower_CI = calc_variance_ci(cur_data())[1],
Upper_CI = calc_variance_ci(cur_data())[2]
)
intervalos_confianza_var_df <- as.data.frame(ci_var_departamento)
# Modificar nombres de columnas para evitar problemas con LaTeX
colnames(intervalos_confianza_var_df) <- c("DEPARTAMENTO", "Límite Inferior", "Límite Superior")
# Imprime el resumen en una tabla usando kable
knitr::kable(intervalos_confianza_var_df, format = "latex", booktabs = TRUE, escape = FALSE, caption = "Resumen de Intervalos de confianza de la Varianza de la variable MONTO según departamento") %>% kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
# Contar la cantidad de deportistas por federación
cantidad_deportistas_por_federacion <- muestra_deportistas_departamento %>%
group_by(FEDERACION) %>%
summarise(Cantidad = n()) %>%
arrange(desc(Cantidad))
# Seleccionar las 10 federaciones con más deportistas
top_10_federaciones <- cantidad_deportistas_por_federacion %>%
top_n(10, Cantidad) %>%
ungroup()
# Calcular la proporción respecto al total
total_deportistas <- sum(top_10_federaciones$Cantidad)
top_10_federaciones <- top_10_federaciones %>%
mutate(Proporcion = round(Cantidad / total_deportistas, 4))
# Calcular el total por columna y agregar una fila
total_por_columna <- top_10_federaciones %>%
summarise(
FEDERACION = "Total",
Cantidad = sum(Cantidad),
Proporcion = sum(Proporcion)
)
# Combinar los resultados y ordenar
resultado_final <- bind_rows(top_10_federaciones, total_por_columna) %>%
arrange(desc(Cantidad))  # Ordenar por cantidad de deportistas (opcional)
# Imprime el resumen en una tabla usando kable
knitr::kable(resultado_final, format = "latex", booktabs = TRUE, escape = FALSE, caption = "Resumen de la proporción por Federación") %>% kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
library(tibble)
# límite inferior
prop_atlestismo_li <- round(resultado_final$Proporcion-qnorm(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325), 4)
# límite superior
prop_atlestismo_su <- round(resultado_final$Proporcion+qnorm(0.975)*sqrt((resultado_final$Proporcion*(1-resultado_final$Proporcion))/325), 4)
prop_atlestismo_tibble_li <- as_tibble(prop_atlestismo_li)
prop_atlestismo_tibble_su <- as_tibble(prop_atlestismo_su)
tabla_proporcion_intervalos <- bind_cols(resultado_final$FEDERACION, prop_atlestismo_tibble_li, prop_atlestismo_tibble_su)
colnames(tabla_proporcion_intervalos) <- c("FEDERACION", "Límite Inferior", "Límite Superior")
# Imprime el resumen en una tabla usando kable
knitr::kable(tabla_proporcion_intervalos, format = "latex", booktabs = TRUE, escape = FALSE, caption = "Resumen de Intervalos de confianza de la proporción de deportista según Federación") %>% kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
resumen_lima <- resumen_monto_departamento[6:6,]
knitr::kable(resumen_lima, format = "latex", booktabs = TRUE, escape = FALSE, caption = "Estadísticas de Lima") %>% kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
deportes_lima <- muestra_deportistas_departamento[muestra_deportistas_departamento$DEPARTAMENTO=="LIMA",]
# Parámetros de la prueba
mu_0_lima_med <- 1220  # valor hipotético de la media
alpha_lima_med <- 0.05  # nivel de significancia
monto_lima_lima_med <- deportes_lima$MONTO  # extraer la columna MONTO
n_lima_med <- length(monto_lima_lima_med)
media_muestral_lima_med <- mean(monto_lima_lima_med)
desviacion_estandar_lima_med <- sd(monto_lima_lima_med)
error_estandar_lima_med <- desviacion_estandar_lima_med / sqrt(n_lima_med)
t_estadistico_lima_med <- (media_muestral_lima_med - mu_0_lima_med) / error_estandar_lima_med
df_lima_med <- n_lima_med - 1  # grados de libertad
# Valor crítico para una cola izquierda
t_critico_lima_med <- qt(alpha_lima_med, df_lima_med, lower.tail = TRUE)
# Crear datos para la gráfica
x_lima_med <- seq(-4, 4, length = 100)
y_lima_med <- dt(x_lima_med, df_lima_med)
data_densidad_lima_med <- data.frame(x = x_lima_med, y = y_lima_med)
prop_original <- 10 / 6
# Crear el gráfico
library(ggplot2)
ggplot(data_densidad_lima_med, aes(x)) +
geom_line(aes(y = y), color = "blue") +
geom_area(data = subset(data_densidad_lima_med, x <= t_critico_lima_med), aes(y = y), fill = "red", alpha = 0.5) +
geom_vline(xintercept = t_critico_lima_med, color = "green", linetype = "dashed") +
geom_vline(xintercept = t_estadistico_lima_med, color = "purple", linetype = "dotted") +
geom_text(aes(x = t_estadistico_lima_med, y = max(y) * 0.9, label = round(t_estadistico_lima_med, 2)), color = "purple", hjust = -0.2) +
labs(title = paste("Prueba de Hipótesis para la Media del MONTO en Lima"),
x = "Valor t",
y = "Densidad",
subtitle = paste("t calculado =", round(t_estadistico_lima_med, 3),
"\nValor crítico t =", round(t_critico_lima_med, 3))) +
theme_minimal() +
theme(
# Ajustar el tamaño del gráfico proporcionalmente
plot.margin = margin(1 * prop_original, 1, 1 * prop_original, 1, "cm")  # Ajuste proporcional del margen en cm
)
resumen_lima_piura <- resumen_monto_departamento[6:7,]
knitr::kable(resumen_lima_piura, format = "latex", booktabs = TRUE, escape = FALSE, caption = "Estadísticas de Lima y Piura") %>% kable_styling(latex_options = c("striped", "hold_position"), full_width = FALSE)
# Parámetros de la prueba
sigma_0_lima_piura_var <- 0  # valor hipotético de la varianza
alpha_lima_piura_var <- 0.10  # nivel de significancia
n_lima_piura_var <- 70  # tamaño de la muestra por departamento
# Dividir los datos por departamento
monto_lima_lima_piura_var <- muestra_deportistas_departamento$MONTO[muestra_deportistas_departamento$DEPARTAMENTO == "LIMA"]
monto_piura_lima_piura_var <- muestra_deportistas_departamento$MONTO[muestra_deportistas_departamento$DEPARTAMENTO == "PIURA"]
# Parámetros de la prueba
n_lima_lima_piura_var <- length(monto_lima_lima_piura_var)
n_piura_lima_piura_var <- length(monto_piura_lima_piura_var)
var_lima_lima_piura_var <- var(monto_lima_lima_piura_var)
var_piura_lima_piura_var <- var(monto_piura_lima_piura_var)
f_estadistico_lima_piura_var <- var_lima_lima_piura_var / var_piura_lima_piura_var
df1_lima_piura_var <- n_lima_lima_piura_var - 1
df2_lima_piura_var <- n_piura_lima_piura_var - 1
# Valores críticos para una prueba de dos colas
alpha_lima_piura_var <- 0.05
f_critico_inferior_lima_piura_var <- qf(alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
f_critico_superior_lima_piura_var <- qf(1 - alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
# Crear datos para la gráfica
x_lima_piura_var <- seq(0, 2.5, length = 100)
y_lima_piura_var <- df(x_lima_piura_var, df1_lima_piura_var, df2_lima_piura_var)
data_densidad_lima_piura_var <- data.frame(x = x_lima_piura_var, y = y_lima_piura_var)
ggplot(data_densidad_lima_piura_var, aes(x)) +
geom_line(aes(y = y), color = "blue") +
geom_area(data = subset(data_densidad_lima_piura_var, x <= f_critico_inferior_lima_piura_var | x >= f_critico_superior_lima_piura_var), aes(y = y), fill = , alpha = 0.5) +
geom_vline(xintercept = f_critico_inferior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_critico_superior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_estadistico_lima_piura_var, color = "purple", linetype = "dotted") +
geom_text(aes(x = f_estadistico_lima_piura_var, y = max(y_lima_piura_var) * 0.9, label = round(f_estadistico_lima_piura_var, 2)), color = "purple", hjust = -0.2) +
labs(title = "Prueba de Hipótesis para la Varianza del MONTO entre Lima y Piura",
x = "Valor F",
y = "Densidad",
subtitle = paste("F calculado =", round(f_estadistico_lima_piura_var, 3),
"\nValor crítico inferior =", round(f_critico_inferior_lima_piura_var, 3),
"\nValor crítico superior =", round(f_critico_superior_lima_piura_var, 3))) +
theme_minimal() + theme(
# Ajustar el tamaño del gráfico proporcionalmente
plot.margin = margin(1 * prop_original, 1, 1 * prop_original, 1, "cm")  # Ajuste proporcional del margen en cm
)
# Parámetros de la prueba
sigma_0_lima_piura_var <- 0  # valor hipotético de la varianza
alpha_lima_piura_var <- 0.10  # nivel de significancia
n_lima_piura_var <- 70  # tamaño de la muestra por departamento
# Dividir los datos por departamento
monto_lima_lima_piura_var <- muestra_deportistas_departamento$MONTO[muestra_deportistas_departamento$DEPARTAMENTO == "LIMA"]
monto_piura_lima_piura_var <- muestra_deportistas_departamento$MONTO[muestra_deportistas_departamento$DEPARTAMENTO == "PIURA"]
# Parámetros de la prueba
n_lima_lima_piura_var <- length(monto_lima_lima_piura_var)
n_piura_lima_piura_var <- length(monto_piura_lima_piura_var)
var_lima_lima_piura_var <- var(monto_lima_lima_piura_var)
var_piura_lima_piura_var <- var(monto_piura_lima_piura_var)
f_estadistico_lima_piura_var <- var_lima_lima_piura_var / var_piura_lima_piura_var
df1_lima_piura_var <- n_lima_lima_piura_var - 1
df2_lima_piura_var <- n_piura_lima_piura_var - 1
# Valores críticos para una prueba de dos colas
alpha_lima_piura_var <- 0.05
f_critico_inferior_lima_piura_var <- qf(alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
f_critico_superior_lima_piura_var <- qf(1 - alpha_lima_piura_var / 2, df1_lima_piura_var, df2_lima_piura_var, lower.tail = TRUE)
# Crear datos para la gráfica
x_lima_piura_var <- seq(0, 2.5, length = 100)
y_lima_piura_var <- df(x_lima_piura_var, df1_lima_piura_var, df2_lima_piura_var)
data_densidad_lima_piura_var <- data.frame(x = x_lima_piura_var, y = y_lima_piura_var)
ggplot(data_densidad_lima_piura_var, aes(x)) +
geom_line(aes(y = y), color = "blue") +
geom_area(data = subset(data_densidad_lima_piura_var, x <= f_critico_inferior_lima_piura_var | x >= f_critico_superior_lima_piura_var), aes(y = y), fill = "white", alpha = 0.5) +
geom_vline(xintercept = f_critico_inferior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_critico_superior_lima_piura_var, color = "green", linetype = "dashed") +
geom_vline(xintercept = f_estadistico_lima_piura_var, color = "purple", linetype = "dotted") +
geom_text(aes(x = f_estadistico_lima_piura_var, y = max(y_lima_piura_var) * 0.9, label = round(f_estadistico_lima_piura_var, 2)), color = "purple", hjust = -0.2) +
labs(title = "Prueba de Hipótesis para la Varianza del MONTO entre Lima y Piura",
x = "Valor F",
y = "Densidad",
subtitle = paste("F calculado =", round(f_estadistico_lima_piura_var, 3),
"\nValor crítico inferior =", round(f_critico_inferior_lima_piura_var, 3),
"\nValor crítico superior =", round(f_critico_superior_lima_piura_var, 3))) +
theme_minimal() + theme(
# Ajustar el tamaño del gráfico proporcionalmente
plot.margin = margin(1 * prop_original, 1, 1 * prop_original, 1, "cm")  # Ajuste proporcional del margen en cm
)
